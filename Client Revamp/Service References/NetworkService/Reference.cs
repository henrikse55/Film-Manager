//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client_Revamp.NetworkService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Client", Namespace="http://schemas.datacontract.org/2004/07/Manager_Networker.Containers")]
    [System.SerializableAttribute()]
    public partial class Client : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IpField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PortField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Ip {
            get {
                return this.IpField;
            }
            set {
                if ((object.ReferenceEquals(this.IpField, value) != true)) {
                    this.IpField = value;
                    this.RaisePropertyChanged("Ip");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Port {
            get {
                return this.PortField;
            }
            set {
                if ((this.PortField.Equals(value) != true)) {
                    this.PortField = value;
                    this.RaisePropertyChanged("Port");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="NetworkService.IManagerService")]
    public interface IManagerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerService/NetworkScan", ReplyAction="http://tempuri.org/IManagerService/NetworkScanResponse")]
        void NetworkScan(string User);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerService/NetworkScan", ReplyAction="http://tempuri.org/IManagerService/NetworkScanResponse")]
        System.Threading.Tasks.Task NetworkScanAsync(string User);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerService/ConnectToClient", ReplyAction="http://tempuri.org/IManagerService/ConnectToClientResponse")]
        void ConnectToClient(Client_Revamp.NetworkService.Client client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerService/ConnectToClient", ReplyAction="http://tempuri.org/IManagerService/ConnectToClientResponse")]
        System.Threading.Tasks.Task ConnectToClientAsync(Client_Revamp.NetworkService.Client client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerService/SendMessageTo", ReplyAction="http://tempuri.org/IManagerService/SendMessageToResponse")]
        void SendMessageTo(Client_Revamp.NetworkService.Client client, string Message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerService/SendMessageTo", ReplyAction="http://tempuri.org/IManagerService/SendMessageToResponse")]
        System.Threading.Tasks.Task SendMessageToAsync(Client_Revamp.NetworkService.Client client, string Message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IManagerServiceChannel : Client_Revamp.NetworkService.IManagerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ManagerServiceClient : System.ServiceModel.ClientBase<Client_Revamp.NetworkService.IManagerService>, Client_Revamp.NetworkService.IManagerService {
        
        public ManagerServiceClient() {
        }
        
        public ManagerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ManagerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ManagerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ManagerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void NetworkScan(string User) {
            base.Channel.NetworkScan(User);
        }
        
        public System.Threading.Tasks.Task NetworkScanAsync(string User) {
            return base.Channel.NetworkScanAsync(User);
        }
        
        public void ConnectToClient(Client_Revamp.NetworkService.Client client) {
            base.Channel.ConnectToClient(client);
        }
        
        public System.Threading.Tasks.Task ConnectToClientAsync(Client_Revamp.NetworkService.Client client) {
            return base.Channel.ConnectToClientAsync(client);
        }
        
        public void SendMessageTo(Client_Revamp.NetworkService.Client client, string Message) {
            base.Channel.SendMessageTo(client, Message);
        }
        
        public System.Threading.Tasks.Task SendMessageToAsync(Client_Revamp.NetworkService.Client client, string Message) {
            return base.Channel.SendMessageToAsync(client, Message);
        }
    }
}
